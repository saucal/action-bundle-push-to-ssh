name: "Push to SSH"
description: "Push built source to SSH"
inputs:
  source:
    description: "Source directory"
    required: false
    default: 'source'
  built:
    description: "Previous build directory (needs to be repo and have a remote)"
    required: false
    default: 'built'
  env-host:
    description: "Env Host"
    required: true
    default: ''
  env-port:
    description: "Env Port"
    required: true
    default: '22'
  env-user:
    description: "Env User"
    required: true
    default: ''
  env-key:
    description: "Env SSH Key"
    required: false
    default: ''
  env-pass:
    description: "Env Password"
    required: false
    default: ''
  env-remote-root:
    description: "Env Remote Root"
    required: true
    default: ''
  ssh-flags:
    description: "SSH Flags to pass to the RSync command"
    required: false
    default: ''
  ssh-shell-params:
    description: "Parameters to be passed to the SSH shell command"
    required: false
    default: ''
  ssh-extra-options:
    description: "Extra options for the RSync command"
    required: false
    default: ''
  ssh-handle-perms:
    description: "Have RSync handle permissions of files strictly"
    required: false
    default: 'false'
  force-ignore:
    description: "Force ignore files"
    required: false
    default: |
      /auth.json
      /vendor/*
      !/vendor/composer
      /vendor/composer/*
      !/vendor/composer/installers
      !/vendor/composer/installed.json
  ssh-ignore:
    description: "Force ignore files"
    required: false
    default: 'false'
  ssh-ignore-extra:
    description: "Extra force ignore files over SSH. Useful to extend the default configuration."
    required: false
    default: 'false'
  disable-consistency-check:
    description: Do not do a consistency check and complete the workflow regardless.
    required: false
    default: ''

  flush-cache:
    description: "Flush cache after deployment"
    required: false
    default: 'false'

  flush-cache-extra-params:
    description: "Flush cache parameters. This is depending on the flush-cache setup."
    required: false
    default: ''

  git-token:
    description: "Git Token"
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Set message
      uses: saucal/action-slack-notification@v1
      with:
        status: "Preparing built assets :large_yellow_circle:"

    - name: Build To GIT
      id: 'build-to-git'
      uses: saucal/action-build-to-git@v2
      with:
        from: ${{ inputs.source }}
        path: ${{ inputs.built }}
        defer-push: "true"
        force-ignore: ${{ inputs.force-ignore }}
        strict-perms: ${{ inputs.ssh-handle-perms }}

    - name: Set message
      uses: saucal/action-slack-notification@v1
      if: "${{ steps.build-to-git.outputs.has-prev-commit == 'true' }}"
      with:
        status: "Pushing to SSH :large_yellow_circle:"

    - name: Set message
      uses: saucal/action-slack-notification@v1
      if: "${{ steps.build-to-git.outputs.has-prev-commit == 'false' }}"
      with:
        status: "Running initial consistency check :large_yellow_circle:"

    - name: Deploy to SSH
      id: 'deploy-to-ssh'
      uses: saucal/action-deploy-ssh@v4
      with:
        manifest: "${{ ( inputs.disable-consistency-check != 'true' && steps.build-to-git.outputs.has-prev-commit == 'true' ) && steps.build-to-git.outputs.manifest || '' }}"
        env-host: ${{ inputs.env-host }}
        env-port: ${{ inputs.env-port }}
        env-user: ${{ inputs.env-user }}
        env-key: ${{ inputs.env-key }}
        env-pass: ${{ inputs.env-pass }}
        env-local-root: ${{ inputs.built }}
        env-remote-root: ${{ inputs.env-remote-root }}
        force-ignore: ${{ inputs.ssh-ignore }}
        force-ignore-extra: ${{ inputs.ssh-ignore-extra }}
        ssh-flags: ${{ inputs.ssh-flags }}
        ssh-shell-params: ${{ inputs.ssh-shell-params }}
        ssh-extra-options: ${{ inputs.ssh-extra-options }}
        ssh-handle-perms: ${{ inputs.ssh-handle-perms }}
        consistency-check: ${{ ( inputs.disable-consistency-check != 'true' && steps.build-to-git.outputs.has-prev-commit == 'false' ) && 'true' || '' }}

    - name: Prepare flush cache
      id: 'flush-cache-prepare'
      shell: bash
      run: |
        INPUT_FLUSH_CACHE="${{ inputs.flush-cache }}"
        if [ "${INPUT_FLUSH_CACHE}" != 'false' ]; then
          echo "do-flush=true" >> $GITHUB_OUTPUT
          if [ "${INPUT_FLUSH_CACHE}" == 'true' ]; then
            echo "flush-type=default" >> $GITHUB_OUTPUT
          elif [ "${INPUT_FLUSH_CACHE}" == 'auto' ]; then
            # maybe attempt to detect flush type
            # would need insshetion to run some commands through ssh maybe
            # turn into default for the time being, so it doesn't do anything
            echo "flush-type=default" >> $GITHUB_OUTPUT
          else
            echo "flush-type=${INPUT_FLUSH_CACHE}" >> $GITHUB_OUTPUT
          fi
        else
          echo "do-flush=false" >> $GITHUB_OUTPUT
        fi

    - name: Flush cache
      if: ${{ steps.flush-cache-prepare.outputs.do-flush == 'true' }}
      id: 'flush-cache'
      working-directory: ${{ github.workspace }}/${{ inputs.built }}
      shell: bash {0}
      run: |
        INPUT_FLUSH_CACHE="${{ steps.flush-cache-prepare.outputs.do-flush }}"
        INPUT_FLUSH_CACHE_TYPE="${{ steps.flush-cache-prepare.outputs.flush-type }}"
        INPUT_FLUSH_CACHE_EXTRA_PARAMS="${{ inputs.flush-cache-extra-params }}"
        echo "::group::Flushing cache with type: ${INPUT_FLUSH_CACHE_TYPE}"

        exitcode=0
        if [ "${INPUT_FLUSH_CACHE_TYPE}" == 'convesio' ]; then
          echo "Running command: " curl -s -f -I -X POST "${INPUT_FLUSH_CACHE_EXTRA_PARAMS}"
          echo ""
          curl -s -f -I -X POST "${INPUT_FLUSH_CACHE_EXTRA_PARAMS}" || exitcode=$?
        else
          echo "By default, we're not flushing cache, as we don't know how to do it in a generic way"
        fi
        echo "::endgroup::"
        if [ $exitcode -ne 0 ]; then
          echo ""
          echo "::warning title:Flush cache failed::Failed to flush cache"
        else
          echo "Flushed cache"
        fi

    - name: Kinsta cache flush # https://kinsta.com/docs/wordpress-hosting/site-management/wordpress-wp-cli/#clear-the-full-page-cache-and-edge-cache
      if: ${{ steps.flush-cache-prepare.outputs.do-flush == 'true' && steps.flush-cache-prepare.outputs.flush-type == 'kinsta' }}
      uses: saucal/action-inssheption@v2
      with:
        GH_TOKEN:            ${{ inputs.git-token }}
        TARGET_SSH_HOST:     ${{ inputs.env-host }}
        TARGET_SSH_USER:     ${{ inputs.env-user }}
        TARGET_SSH_KEY:      ${{ inputs.env-key }}
        TARGET_SSH_PASS:     ${{ inputs.env-pass }}
        TARGET_SSH_PORT:     ${{ inputs.env-port }}
        TARGET_SSH_PATH_DIR: ${{ inputs.env-remote-root }}
        EXTRA_SCRIPT_ARGS:   -c "notice 'Flushing Kinsta cache'" -c "rcli kinsta cache purge"

    - name: WPE cache flush
      if: ${{ steps.flush-cache-prepare.outputs.do-flush == 'true' && steps.flush-cache-prepare.outputs.flush-type == 'wpe' }}
      uses: saucal/action-inssheption@v2
      with:
        GH_TOKEN:            ${{ inputs.git-token }}
        TARGET_SSH_HOST:     ${{ inputs.env-host }}
        TARGET_SSH_USER:     ${{ inputs.env-user }}
        TARGET_SSH_KEY:      ${{ inputs.env-key }}
        TARGET_SSH_PASS:     ${{ inputs.env-pass }}
        TARGET_SSH_PORT:     ${{ inputs.env-port }}
        TARGET_SSH_PATH_DIR: ${{ inputs.env-remote-root }}
        EXTRA_SCRIPT_ARGS:   -c "notice 'Flushing WPE cache'" -c "rcli cdn-cache flush"

    - name: Send details about SSH consistency
      if: ${{ always() && ( inputs.disable-consistency-check != 'true' && steps.build-to-git.outputs.has-prev-commit == 'false' ) && steps.deploy-to-ssh.outcome == 'failure' }}
      uses: saucal/action-slack-notification@main
      with:
        data-file: ${{ steps.deploy-to-ssh.outputs.bufferPath }}

    - name: Set message
      uses: saucal/action-slack-notification@v1
      with:
        status: "Pushing to GIT :large_yellow_circle:"

    - name: Push to GIT
      id: 'push-to-git'
      uses: saucal/action-build-to-git@v2
      with:
        path: ${{ inputs.built }}
        do-push: "true"
